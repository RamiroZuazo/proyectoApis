swagger: '2.0'
info:
  version: 1.0.0
  title: Users API
  description: API for managing users.
host: localhost:3000
basePath: /api
schemes:
  - http
  - https
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users.
      produces:
        - application/json
      responses:
        '200':
          description: A list of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Create a new user
      description: Creates a new user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: User created successfully.
          schema:
            $ref: '#/definitions/User'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a single user by their ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to retrieve.
      responses:
        '200':
          description: User retrieved successfully.
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found.
    put:
      summary: Update user by ID
      description: Updates a user by their ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to update.
        - in: body
          name: body
          description: Updated user object.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User updated successfully.
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found.
    delete:
      summary: Delete user by ID
      description: Deletes a user by their ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to delete.
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.
  /projects:
    get:
      summary: Get all projects
      description: Retrieve all projects from the database.
      responses:
        '200':
          description: List of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
    post:
      summary: Create a new project
      description: Add a new project to the database.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '201':
          description: Project created successfully.
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid input.
  /projects/{id}:
    get:
      summary: Get project by ID
      description: Retrieve a single project by its ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to retrieve.
      responses:
        '200':
          description: Project retrieved successfully.
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: Project not found.
    put:
      summary: Update project by ID
      description: Updates a project by its ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to update.
        - in: body
          name: body
          description: Updated project object.
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Project updated successfully.
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: Project not found.
    delete:
      summary: Delete project by ID
      description: Deletes a project by its ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to delete.
      responses:
        '200':
          description: Project deleted successfully.
        '404':
          description: Project not found.
  
  /tickets:
    get:
      summary: Get all tickets
      description: >-
        Retrieve a list of all tickets, including related project and user
        details.
      tags:
        - Tickets
      responses:
        '200':
          description: A list of tickets.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
    post:
      summary: Create a new ticket
      description: Create a new ticket with the specified details.
      tags:
        - Tickets
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTicketRequest'
      responses:
        '201':
          description: Ticket created successfully.
          schema:
            $ref: '#/definitions/Ticket'
  /tickets/{id}:
    get:
      summary: Get a ticket by ID
      description: Retrieve details of a ticket by its ID.
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to retrieve.
      responses:
        '200':
          description: Details of the requested ticket.
          schema:
            $ref: '#/definitions/Ticket'
    put:
      summary: Update a ticket
      description: Update details of a ticket by its ID.
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to update.
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTicketRequest'
      responses:
        '200':
          description: Ticket updated successfully.
          schema:
            $ref: '#/definitions/Ticket'
    delete:
      summary: Delete a ticket
      description: Delete a ticket by its ID.
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to delete.
      responses:
        '200':
          description: Ticket deleted successfully.
  /tickets/project/{projectId}:
    get:
      summary: Get tickets by project
      description: Retrieve a list of tickets associated with a specific project.
      tags:
        - Tickets
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: ID of the project to retrieve tickets for.
      responses:
        '200':
          description: A list of tickets for the specified project.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
  /tickets/user/{email}:
    get:
      summary: Get tickets by user
      description: Retrieve a list of tickets associated with a specific user.
      tags:
        - Tickets
      parameters:
        - in: path
          name: email
          required: true
          type: string
          description: Email of the user to retrieve tickets for.
      responses:
        '200':
          description: A list of tickets for the specified user.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'

  /gastos/dividir:
    post:
      summary: Divide expenses among project members
      description: >-
        Divides the expenses of a ticket among all the members of the respective
        project.
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              ticketId:
                type: integer
                description: Ticket ID
              montoTotal:
                type: number
                description: Total amount to divide
            required:
              - ticketId
              - montoTotal
      responses:
        '200':
          description: Expenses successfully divided and assigned to members.
          schema:
            type: array
            items:
              $ref: '#/definitions/GastoMiembro'
        '404':
          description: Ticket or project members not found.
        '500':
          description: Internal server error.

  /gastos/{usuarioId}:
    get:
      summary: Get expenses for a user
      description: Retrieve all expenses associated with a specific user.
      parameters:
        - name: usuarioId
          in: path
          required: true
          type: integer
          description: User ID
      responses:
        '200':
          description: User expenses retrieved successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/GastoMiembro'
        '404':
          description: User expenses not found.
        '500':
          description: Internal server error.

  /gastos/marcar-pagado:
    post:
      summary: Mark expenses as paid
      description: Marks all expenses of a user in a specific project as paid.
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              proyecto_id:
                type: integer
                description: Project ID
              usuario_id:
                type: integer
                description: User ID who has the expense
              usuario_responsable_id:
                type: integer
                description: Responsible user ID
            required:
              - proyecto_id
              - usuario_id
              - usuario_responsable_id
      responses:
        '200':
          description: Expenses marked as paid successfully.
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Whether the operation was successful.
        '404':
          description: Expenses or project not found.
        '500':
          description: Internal server error.

definitions:
  Ticket:
    type: object
    properties:
      id:
        type: integer
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      imagen_ticket:
        type: string
      proyecto:
        $ref: '#/definitions/Project'
      usuario_responsable:
        $ref: '#/definitions/User'
  CreateTicketRequest:
    type: object
    required:
      - fecha
      - monto
      - descripcion
      - proyecto_id
      - usuario_responsable_id
    properties:
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      proyecto_id:
        type: integer
      usuario_responsable_id:
        type: integer
      imagen_ticket:
        type: string
  UpdateTicketRequest:
    type: object
    properties:
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      imagen_ticket:
        type: string
  Project:
    type: object
    properties:
      id:
        type: integer
      nombre:
        type: string
      descripcion:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
      nombre:
        type: string
      email:
        type: string
  GastoMiembro:
    type: object
    properties:
      usuario_id:
        type: integer
        description: User ID
      monto:
        type: number
        description: Amount of expense
      descripcion:
        type: string
        description: Description of the expense
      fecha_pago:
        type: string
        format: date
