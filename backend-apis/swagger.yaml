swagger: '2.0'
info:
  version: 1.0.0
  title: Users API
  description: API for managing users.
host: localhost:8080
basePath: /api
schemes:
  - http
  - https
paths:
  /users:
    get:
      summary: Get de todos los usuarios
      description: Devuelve una lista de todos los usuarios.
      produces:
        - application/json
      tags:
        - Users
      responses:
        '200':
          description: Lista de usuarios.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Crear un nuevo usuario
      description: Crea un nuevo usuario.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
      - Users
      parameters:
        - in: body
          name: body
          description: User object that needs to be added.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: User created successfully.
          schema:
            $ref: '#/definitions/User'
  /users/{id}:
    get:
      summary: Get Usuario por ID
      description: Obtiene un usuario por su ID.
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to retrieve.
      responses:
        '200':
          description: User retrieved successfully.
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found.
    put:
      summary: Update de un usuario por ID
      description: Updatea un usuario mediante su ID.
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to update.
        - in: body
          name: body
          description: Updated user object.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User updated successfully.
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found.
    delete:
      summary: Borrar un usuario por ID
      description: Borra a un usuario mediante su ID
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the user to delete.
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.
  /projects:
    get:
      summary: Get de todos los proyectos
      description: Trae todos los proyectos de la base de datos      
      tags:
        - Proyectos
      responses:
        '200':
          description: List of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
    post:
      summary: Crear un nuevo proyecto
      description: Agrega un proyecto a la base de datos
      tags:
        - Proyectos
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '201':
          description: Project created successfully.
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid input.
  /projects/{id}:
    get:
      summary: Get de un proyecto por ID
      description: Devuelve un proyecto mediante su ID
      tags:
        - Proyectos
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to retrieve.
      responses:
        '200':
          description: Project retrieved successfully.
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: Project not found.
    put:
      summary: Update de un proyecto por ID
      description: Actualiza un proyecto por su ID
      tags:
        - Proyectos
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to update.
        - in: body
          name: body
          description: Updated project object.
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Project updated successfully.
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: Project not found.
    delete:
      summary: Borrar un proyecto por ID
      description: Borra un proyecto por ID
      tags:
        - Proyectos
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the project to delete.
      responses:
        '200':
          description: Project deleted successfully.
        '404':
          description: Project not found.
  /projects/{id}/members:
    post:
      summary: Añadir un miembro a un proyecto
      description: Añade un usuario a un proyecto existente con un rol específico.
      tags:
        - Proyectos
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID del proyecto.
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              usuario_id:
                type: integer
                description: ID del usuario a añadir.
              rol:
                type: string
                description: Rol del usuario en el proyecto.
            required:
              - usuario_id
              - rol
      responses:
        '201':
          description: Usuario añadido al proyecto exitosamente.
        '400':
          description: Proyecto o usuario no encontrado.
        '500':
          description: Error interno del servidor.

    get:
      summary: Obtener miembros de un proyecto
      description: Devuelve una lista de los usuarios asociados a un proyecto, incluyendo sus roles.
      tags:
        - Proyectos
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID del proyecto.
      responses:
        '200':
          description: Lista de miembros del proyecto devuelta exitosamente.
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: ID del usuario.
                nombre:
                  type: string
                  description: Nombre del usuario.
                email:
                  type: string
                  description: Email del usuario.
                rol:
                  type: string
                  description: Rol del usuario en el proyecto.
        '404':
          description: Proyecto no encontrado.
        '500':
          description: Error interno del servidor.

  /projects/{id}/members/{email}:
    delete:
      summary: Eliminar miembro de un proyecto por email
      description: Elimina a un usuario de un proyecto específico usando su email.
      tags:
        - Proyectos
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID del proyecto.
        - in: path
          name: email
          required: true
          type: string
          description: Email del usuario a eliminar.
      responses:
        '200':
          description: Usuario eliminado del proyecto exitosamente.
        '404':
          description: Proyecto o usuario no encontrado.
        '500':
          description: Error interno del servidor.

  /projects/user/{userId}:
    get:
      summary: Obtener proyectos asociados a un usuario
      description: Devuelve una lista de proyectos a los que un usuario está asociado.
      tags:
        - Proyectos
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
          description: ID del usuario.
      responses:
        '200':
          description: Lista de proyectos devuelta exitosamente.
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '404':
          description: Usuario no tiene proyectos asociados.
        '500':
          description: Error interno del servidor.
  
  /tickets:
    get:
      summary: Get de todos los tickets
      description: >-
        Devuelve una lista de todos los tickets, incluyendo su proyecto relacionado y la información del usuario.
      tags:
        - Tickets
      responses:
        '200':
          description: A list of tickets.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
    post:
      summary: Crear un nuevo ticket
      description: Crea un nuevo ticket
      tags:
        - Tickets
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateTicketRequest'
      responses:
        '201':
          description: Ticket created successfully.
          schema:
            $ref: '#/definitions/Ticket'
  /tickets/{id}:
    get:
      summary: Obtiene un ticket por su ID
      description: Obtiene la información de un ticket por su ID
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to retrieve.
      responses:
        '200':
          description: Details of the requested ticket.
          schema:
            $ref: '#/definitions/Ticket'
    put:
      summary: Actualizar un ticket
      description: Actualiza un ticket
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to update.
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTicketRequest'
      responses:
        '200':
          description: Ticket updated successfully.
          schema:
            $ref: '#/definitions/Ticket'
    delete:
      summary: Borrar un ticket por ID
      description: Borra un ticket por ID
      tags:
        - Tickets
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: ID of the ticket to delete.
      responses:
        '200':
          description: Ticket deleted successfully.
  /tickets/project/{projectId}:
    get:
      summary: Obtener tickets por proyecto
      description: Devuelve una lista de los tickets associados a un proyecto en específico.
      tags:
        - Tickets
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: ID of the project to retrieve tickets for.
      responses:
        '200':
          description: A list of tickets for the specified project.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'
  /tickets/user/{email}:
    get:
      summary: Get de los tickets de un usuario
      description: Devuelve una lista de los tickets associados a un usuario en específico
      tags:
        - Tickets
      parameters:
        - in: path
          name: email
          required: true
          type: string
          description: Email of the user to retrieve tickets for.
      responses:
        '200':
          description: A list of tickets for the specified user.
          schema:
            type: array
            items:
              $ref: '#/definitions/Ticket'

  /gastos/dividir:
    post:
      summary: Dividir los gastos entre los miembros del proyecto
      description: >-
        Dividir los gastos entre los miembros del respectivo proyecto
      tags:
        - Gastos
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              ticketId:
                type: integer
                description: Ticket ID
              montoTotal:
                type: number
                description: Total amount to divide
            required:
              - ticketId
              - montoTotal
      responses:
        '200':
          description: Expenses successfully divided and assigned to members.
          schema:
            type: array
            items:
              $ref: '#/definitions/GastoMiembro'
        '404':
          description: Ticket or project members not found.
        '500':
          description: Internal server error.

  /gastos/{usuarioId}:
    get:
      summary: Get gastos de un usuario
      description: Devuelve todos los gastos asociados a un usuario
      tags:
        - Gastos
      parameters:
        - name: usuarioId
          in: path
          required: true
          type: integer
          description: User ID
      responses:
        '200':
          description: User expenses retrieved successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/GastoMiembro'
        '404':
          description: User expenses not found.
        '500':
          description: Internal server error.

  /gastos/marcar-pagado:
    post:
      summary: Marcar gasto como pagado
      description: Marca el gasto de un usuario como pagado
      tags:
        - Gastos
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              proyecto_id:
                type: integer
                description: Project ID
              usuario_id:
                type: integer
                description: User ID who has the expense
              usuario_responsable_id:
                type: integer
                description: Responsible user ID
            required:
              - proyecto_id
              - usuario_id
              - usuario_responsable_id
      responses:
        '200':
          description: Expenses marked as paid successfully.
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Whether the operation was successful.
        '404':
          description: Expenses or project not found.
        '500':
          description: Internal server error.
  /gastos/crear:
    post:
      summary: Crear un nuevo gasto
      description: Registra un nuevo gasto asociado a un ticket y un usuario.
      tags:
        - Gastos
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              ticketId:
                type: integer
                description: ID del ticket asociado al gasto.
              usuarioId:
                type: integer
                description: ID del usuario responsable del gasto.
              monto:
                type: number
                description: Monto del gasto.
            required:
              - ticketId
              - usuarioId
              - monto
      responses:
        '201':
          description: Gasto creado exitosamente.
          schema:
            $ref: '#/definitions/GastoMiembro'
        '400':
          description: Datos inválidos.
        '500':
          description: Error interno del servidor.

  /gastos/pendientes:
    get:
      summary: Obtener gastos pendientes
      description: Devuelve una lista de los gastos pendientes de un usuario deudor relacionados con un responsable y un proyecto.
      tags:
        - Gastos
      parameters:
        - in: query
          name: usuarioResponsableId
          required: true
          type: integer
          description: ID del usuario responsable.
        - in: query
          name: usuarioDeudorId
          required: true
          type: integer
          description: ID del usuario deudor.
        - in: query
          name: proyectoId
          required: true
          type: integer
          description: ID del proyecto asociado.
      responses:
        '200':
          description: Lista de gastos pendientes devuelta exitosamente.
          schema:
            type: array
            items:
              $ref: '#/definitions/GastoMiembro'
        '404':
          description: No se encontraron gastos pendientes.
        '500':
          description: Error interno del servidor.
definitions:
  Ticket:
    type: object
    properties:
      id:
        type: integer
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      imagen_ticket:
        type: string
      proyecto:
        $ref: '#/definitions/Project'
      usuario_responsable:
        $ref: '#/definitions/User'
  CreateTicketRequest:
    type: object
    required:
      - fecha
      - monto
      - descripcion
      - proyecto_id
      - usuario_responsable_id
    properties:
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      proyecto_id:
        type: integer
      usuario_responsable_id:
        type: integer
      imagen_ticket:
        type: string
  UpdateTicketRequest:
    type: object
    properties:
      fecha:
        type: string
        format: date
      monto:
        type: number
      descripcion:
        type: string
      imagen_ticket:
        type: string
  Project:
    type: object
    properties:
      id:
        type: integer
      nombre:
        type: string
      descripcion:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
      nombre:
        type: string
      email:
        type: string
  GastoMiembro:
    type: object
    properties:
      usuario_id:
        type: integer
        description: User ID
      monto:
        type: number
        description: Amount of expense
      descripcion:
        type: string
        description: Description of the expense
      fecha_pago:
        type: string
        format: date
